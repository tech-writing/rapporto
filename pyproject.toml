[build-system]
build-backend = "setuptools.build_meta"
requires = [
  "setuptools>=42", # At least v42 of setuptools required.
  "versioningit",
]

[project]
name = "rapporto"
description = "Harvest information from GitHub and Slack, and create reports in Markdown format."
readme = "README.md"
keywords = [
  "activity report",
  "aggregation",
  "conversion",
  "convert",
  "github",
  "github actions",
  "github activity",
  "github api",
  "github backup",
  "github export",
  "information management",
  "markdown",
  "qa",
  "qa-bot",
  "quality assurance",
  "report",
  "reporting",
  "slack api",
  "slack export",
  "summary",
  "tool",
  "transform",
  "utility",
]
license = { text = "AGPL 3, EUPL 1.2" }
authors = [
  { name = "Andreas Motl", email = "andreas.motl@panodata.org" },
]
requires-python = ">=3.8"
classifiers = [
  "Development Status :: 4 - Beta",
  "Environment :: Plugins",
  "Intended Audience :: Developers",
  "Intended Audience :: Education",
  "Intended Audience :: Information Technology",
  "Intended Audience :: Manufacturing",
  "Intended Audience :: Science/Research",
  "Intended Audience :: System Administrators",
  "Intended Audience :: Telecommunications Industry",
  "License :: OSI Approved :: European Union Public Licence 1.2 (EUPL 1.2)",
  "License :: OSI Approved :: GNU Affero General Public License v3",
  "Operating System :: OS Independent",
  "Operating System :: POSIX :: Linux",
  "Operating System :: Unix",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Programming Language :: Python :: Implementation :: CPython",
  "Programming Language :: Python :: Implementation :: PyPy",
  "Programming Language :: SQL",
  "Topic :: Adaptive Technologies",
  "Topic :: Communications",
  "Topic :: Database",
  "Topic :: Documentation",
  "Topic :: Education",
  "Topic :: Internet",
  "Topic :: Office/Business",
  "Topic :: Scientific/Engineering",
  "Topic :: Scientific/Engineering :: Information Analysis",
  "Topic :: Scientific/Engineering :: Interface Engine/Protocol Translator",
  "Topic :: Software Development :: Libraries",
  "Topic :: Software Development :: Pre-processors",
  "Topic :: Software Development :: Testing",
  "Topic :: Software Development :: Version Control",
  "Topic :: System :: Archiving",
  "Topic :: System :: Benchmark",
  "Topic :: System :: Clustering",
  "Topic :: System :: Distributed Computing",
  "Topic :: System :: Logging",
  "Topic :: System :: Monitoring",
  "Topic :: System :: Networking",
  "Topic :: System :: Systems Administration",
  "Topic :: Text Processing",
  "Topic :: Utilities",
]
dynamic = [
  "version",
]
dependencies = [
  "aika>=0.2.1,<0.3",
  "attrs<26",
  "click<9",
  "click-aliases<2",
  "dataclasses-json<1",
  "github-backup<1",
  "importlib-metadata; python_version<'3.8'",
  "markdown-to-mrkdwn<0.2",
  "munch<5",
  "pueblo<1",
  "python-dateutil<3",
  "requests<3",
  "requests-cache<2",
  "slack-sdk<4",
  "tqdm",
]
optional-dependencies.develop = [
  "mypy<1.16",
  "poethepoet<1",
  "pyproject-fmt<3",
  "ruff<0.10",
  "validate-pyproject<1",
]
optional-dependencies.docs = [
  "myst-parser[linkify]>=0.18,<5",
  "pydata-sphinx-theme<1",
  "sphinx-autobuild",
  "sphinx-copybutton",
  "sphinx-design-elements<1",
  "sphinxcontrib-mermaid<1",
  "sphinxext-opengraph<1",
]
optional-dependencies.release = [
  "build<2",
  "twine<7",
]
optional-dependencies.test = [
  "pytest<9",
  "pytest-cov<7",
]

urls.Documentation = "https://rapporto.readthedocs.io/"
urls.Issues = "https://github.com/tech-writing/rapporto/issues"
urls.Repository = "https://github.com/tech-writing/rapporto"

scripts.rapporto = "rapporto.cli:cli"

[tool.ruff]
line-length = 100

extend-exclude = [
]

lint.select = [
  # Builtins
  "A",
  # Bugbear
  "B",
  # comprehensions
  "C4",
  # Pycodestyle
  "E",
  # eradicate
  "ERA",
  # Pyflakes
  "F",
  # isort
  "I",
  # pandas-vet
  "PD",
  # return
  "RET",
  # Bandit
  "S",
  # print
  "T20",
  "W",
  # flake8-2020
  "YTT",
]

lint.extend-ignore = [
  # zip() without an explicit strict= parameter
  "B905",
  "C408",   # Unnecessary `dict()` call (rewrite as a literal)
  "ERA001", # Found commented-out code.
  # df is a bad variable name. Be kinder to your future self.
  "PD901",
  # Unnecessary variable assignment before `return` statement
  "RET504",
  # Unnecessary `elif` after `return` statement
  "RET505",
  # Probable insecure usage of temporary file or directory
  "S108",
  "T201", # Allow use of `assert`.
]
lint.per-file-ignores."tests/*" = [
  "S101", # Allow use of `assert`.
]

[tool.pytest.ini_options]
addopts = """
  -rfEXs -p pytester --strict-markers --verbosity=3
  --cov --cov-report=term-missing --cov-report=xml
  """
minversion = "2.0"
log_level = "DEBUG"
log_cli_level = "DEBUG"
log_format = "%(asctime)-15s [%(name)-36s] %(levelname)-8s: %(message)s"
pythonpath = [
  "src",
]
testpaths = [
  "tests",
]
xfail_strict = true
markers = [
]

[tool.coverage.run]
branch = false
omit = [
  "tests/*",
]

[tool.coverage.report]
fail_under = 0
show_missing = true

[tool.mypy]
mypy_path = "src"
packages = [
  "rapporto",
]
check_untyped_defs = true
explicit_package_bases = true
ignore_missing_imports = true
implicit_optional = true
install_types = true
namespace_packages = true
non_interactive = true

[tool.versioningit.vcs]
method = "git-archive"
default-tag = "0.0.0"
describe-subst = "$Format:%(describe:tags,match=v*)$"

# ===================
# Tasks configuration
# ===================

[tool.poe.tasks]

check = [
  "lint",
  "test",
]

docs-autobuild = [
  { cmd = "sphinx-autobuild --open-browser --watch src docs docs/_build" },
]
docs-html = [
  { cmd = "sphinx-build -W --keep-going docs docs/_build" },
]
docs-linkcheck = [
  { cmd = "sphinx-build -W --keep-going -b linkcheck docs docs/_build" },
]

format = [
  { cmd = "ruff format ." },
  # Configure Ruff not to auto-fix (remove!):
  # unused imports (F401), unused variables (F841), `print` statements (T201), and commented-out code (ERA001).
  { cmd = "ruff check --fix --ignore=ERA --ignore=F401 --ignore=F841 --ignore=T20 --ignore=ERA001 ." },
  { cmd = "pyproject-fmt --keep-full-version pyproject.toml" },
]

lint = [
  { cmd = "ruff format --check ." },
  { cmd = "ruff check ." },
  { cmd = "validate-pyproject pyproject.toml" },
  { cmd = "mypy" },
]

release = [
  { cmd = "python -m build" },
  { cmd = "twine upload --skip-existing dist/*" },
]

test = [
  { cmd = "pytest" },
]
